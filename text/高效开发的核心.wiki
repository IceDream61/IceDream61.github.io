= 高效开发的核心 =

    以一敌百定律：大神程序员开发效率可以百倍于萌新程序员……

高效开发，是程序员的基本功。
因此，第一篇就来探讨一下高效开发的方方面面。

== 代码录入 ==
编程是把脑海中思路转化为代码的过程，而代码录入到计算机中应该是同时完成的，这是个自然而然的过程，不应该让自己能感觉到其存在。
绝不能让思维去等待键盘录入，因为这样会打断思维，严重影响思路的连贯性，不单大大影响编程速度，更会在思路的不断打断、恢复中产生大量bug。
这件事说起来很自然，但实际上要做到是需要非常多技巧和努力的，具体如下：
1. *熟练盲打* ，从而让打字时间消失
2. *有强大的编辑器* ，从而让代码编辑时间消失
3. *语言语法烂熟于心* ，从而让思路转化为代码的语法适应时间消失
4. *代码结构在编程之初便清晰明了* ，从而避免实现期间重构这个会把思路完全推翻的可能
除去第一点可以在几年之内成为习惯，后两点都是不可能完成的任务，因为编辑器至今还没有一个足够完善的，而语言语法更是无穷无尽。

== 核心 ==
因此，我们无论代码录入能力如何，都必须学会如何在无法自然连贯录入的状态下编程，这事说起来也很简单：
- *思考、录入分离* ，从而让思考连贯得到保证，具体做法例如先在纸上写思路，写好之后再录入成为源代码
所以，你才会看到很多程序员都会先在纸上写写画画，然后再去写代码，因为他们要保证自己的思路连贯啊！

== 思路整理 ==
那么，如何写思路呢？常见的工具有：
1. *伪代码* ，和源代码同样的精细程度，又避免了源代码的语法纠缠
2. *流程图* ，比伪代码更粗粒度、更专注的思路描述
3. *架构图* ，用来描述工程各模块及其关系的方式
4. *各种随性的写法、画法* ，来描述各种奇奇怪怪的思路

== 代码重用 ==
- 你有一段代码，用了五次，你复制粘贴完了，看着乱不说，有bug还得五处一起改，是不是不如写一个函数来调用五次好呢？还能用不同参数复用，增加可读性~
- 你有一个功能，工程里面很多组件都要基于它的，你分别实现，是不是不如干脆实现一个通用模块，然后都用这个好呢？这样维护方便，使用时思路也清晰。
- 你三年前写过一段1000行的代码，三年后要写同样功能的代码，重写可能要两天，但复制粘贴只是一瞬间的事情，还不会有bug，何乐而不为呢？
- 你要实现一个很常见的功能，自己从头用一周、一个月的时间实现，甚至因为工作量巨大而被迫换思路，是不是不如直接用成熟稳定的开源代码好呢？还有很多兄弟们帮你维护~
- ……
这些，就是编程领域的代码重用。
说起来很简单，可实际做起来全都是编程能力的体现。你需要：
1. 对代码的复杂逻辑进行无遗漏的分析，从而 *提取出重用的部分*
2. 对重用的部分单独抽离出来， *用通用的方式抽象成模块* ，这时涉及的语法难度、见识广度要求都上升了一个档次
3. 你可能还需要把这种模块 *提供成跨进程、跨主机的服务* ，这样对你操作系统、网络的知识又有了要求
4. 最后，为了保证其可用性，你必然是需要 *不断维护* 的，这就是个无底洞……

== 下文预告 ==
高效开发可能是日常编程最关心的问题，
但往往随着水平的提高，当你已经有了自己的一套高效开发习惯，足够满足日常工作之后；
你的关注点会越来越偏向于很多其他地方，比如：
- 为什么我的代码总有很多bug，这让我的编程总是很难受
- 每当换一个领域，我的经验就全都用不上了，好难过
- 为什么别人总是不知道我在说什么？我说得很清楚啊
- 合作真是太麻烦了，还不如一个人做呢……
这些问题很常见，而且也会伴随着你的整个编程生涯，绕不开。
那么下一篇，就让我们来聊聊：[[很多平时看不到的内功]]。
